package mcp

import "context"

// Tool represents an MCP tool that can be invoked by agents.
// Tools are functions with defined input schemas that perform actions or retrieve information.
type Tool struct {
	// Name is the unique identifier for this tool
	Name string

	// Description explains what this tool does (shown to the LLM)
	Description string

	// InputSchema defines the parameters this tool accepts (JSON Schema format)
	// This is passed to the LLM so it knows how to call the tool
	InputSchema map[string]interface{}

	// Handler is the actual function that executes when the tool is called
	Handler ToolHandler
}

// ToolHandler is the function signature for tool implementations.
// It receives the tool arguments and returns a result or error.
type ToolHandler func(ctx context.Context, arguments map[string]interface{}) (interface{}, error)

// ToolCall represents a request from an LLM to invoke a tool.
type ToolCall struct {
	// ID is a unique identifier for this specific call (generated by LLM API)
	ID string

	// Name is the tool being called
	Name string

	// Arguments are the parameters passed to the tool
	Arguments map[string]interface{}
}

// ToolResult represents the outcome of executing a tool.
type ToolResult struct {
	// ToolCallID matches the ID from the ToolCall request
	ToolCallID string

	// Content is the result data returned by the tool
	Content interface{}

	// IsError indicates if the tool execution failed
	IsError bool
}
